name: RECOVERY

on:
  workflow_dispatch:
    inputs:
      RECOVERY_URL:
        description: 'URL direta do recovery (.img ou .img.lz4)'
        required: true

jobs:
  build:
    # Usando o runner mais recente
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout (v4)
        uses: actions/checkout@v4

      # NOVO: Configura o QEMU para emular a arquitetura ARM (necessária para o magiskboot)
      - name: Configurar QEMU para emulação ARM
        uses: docker/setup-qemu-action@v3

      - name: Instalar dependências
        run: |
          sudo apt-get update
          sudo apt-get install -y lz4 curl unzip zip tar git file

      - name: Baixar recovery
        run: |
          set -e
          URL="${{ github.event.inputs.RECOVERY_URL }}"
          echo "Baixando: $URL"
          # Usa a flag -L para seguir redirecionamentos
          curl -L "$URL" -o recovery.bin
          file recovery.bin || true

          # Se for LZ4, descompacta; senão, renomeia
          if file recovery.bin | grep -qi "LZ4"; then
            echo "Detectado LZ4, descompactando..."
            lz4 -d recovery.bin recovery.img
          else
            mv recovery.bin recovery.img
          fi

          ls -lh recovery.img

          # Copia para o local onde o script2 procura (diretório de trabalho)
          # O arquivo r.img é o nome hardcoded esperado pelo script2.sh
          cp -f recovery.img r.img
          ls -lh r.img

      - name: Baixar magiskboot e posicionar no caminho correto
        run: |
          set -e
          # CORREÇÃO: Usando URL de download direto e estável para evitar erros de redirecionamento
          MAGISK_URL="https://github.com/topjohnwu/Magisk/releases/download/v27.0/Magisk-v27.0.apk"
          echo "Baixando Magisk.apk de: $MAGISK_URL"
          curl -L -o Magisk.apk "$MAGISK_URL"

          # Extrai o binário arm64 e transforma em executável
          unzip -j Magisk.apk lib/arm64-v8a/libmagiskboot.so -d .
          mv libmagiskboot.so magiskboot
          chmod +x magiskboot

          # A linha de cópia desnecessária foi removida
          ls -l magiskboot

      - name: Rodar script1.sh
        run: |
          set -e
          chmod +x script1.sh script2.sh || true
          # O arquivo r.img está no mesmo diretório
          ./script1.sh r.img || ./script1.sh || true

      - name: Rodar script2.sh
        run: |
          set -e
          ./script2.sh

      - name: Coletar artefatos gerados e criar .tar.md5 para Odin
        run: |
          set -e
          mkdir -p output
          
          # 1. Pega o arquivo recovery-patched.img do diretório raiz
          #    e copia para a pasta 'output'
          IMG_SOURCE=$(ls -1 *patched*recovery*.img 2>/dev/null | head -n1 || true)
          
          if [ -z "$IMG_SOURCE" ]; then
              echo "ERRO: Não foi encontrado o arquivo recovery-patched.img. Verifique se o script2.sh rodou corretamente."
              exit 1
          fi
          
          cp -f "$IMG_SOURCE" output/
          IMG="output/$(basename "$IMG_SOURCE")"
          
          # 2. Tenta criar o arquivo .tar.md5 para Odin
          BASE_NAME=$(basename "$IMG")
          TAR_FILE="output/patched-recovery.tar"
          MD5_FILE="output/patched-recovery.tar.md5"
          
          echo "Criando TAR para Odin a partir de: $IMG"
          
          # Cria o arquivo .tar a partir do IMG
          # O comando 'tar' deve ser executado no diretório 'output' para incluir apenas o IMG
          tar --format=ustar -cvf "$TAR_FILE" -C output/ "$(basename "$IMG")"
          
          # Calcula o checksum MD5 e anexa ao final do .tar
          MD5_SUM=$(md5sum -b "$TAR_FILE" | awk '{print $1}')
          echo "Checksum MD5 calculado: $MD5_SUM"
          
          # Anexa o checksum ao arquivo .tar e renomeia para .tar.md5
          mv "$TAR_FILE" "$MD5_FILE"
          echo "$MD5_SUM" >> "$MD5_FILE"
          
          # 3. Copia o vbmeta_disabled_R.tar para a pasta de saída
          if [ -f vbmeta_disabled_R.tar ]; then
              cp -f vbmeta_disabled_R.tar output/
              echo "vbmeta_disabled_R.tar copiado para output."
          fi
          
          ls -lh output || true

      - name: Upload patched recovery (v4)
        uses: actions/upload-artifact@v4
        with:
          name: patched-recovery
          path: output/*
          retention-days: 7
